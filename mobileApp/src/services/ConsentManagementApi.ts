/**
 * MeetNow Internal Communication API
 * This is the API for internal communication between the MeetNow app on mobile devices and the backend
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../gen/model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../gen/variables';
import { Configuration }                                     from '../gen/configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ConsentManagementApi {
    protected basePath = 'https://meetnow.cfapps.eu10.hana.ondemand.com';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * notify the backend that the client leaves a defined area
     *
     * @param hasTime yes or no
     * @param meetingId
     * @param userId
     */
    public consent(hasTime: string, meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.consentWithHttpInfo(hasTime, meetingId, userId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return undefined;
                }
            });
    }


    /**
     * notify the backend that the client leaves a defined area
     *
     * @param hasTime yes or no
     * @param meetingId
     * @param userId
     */
    public consentWithHttpInfo(hasTime: string, meetingId: string, userId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/consent`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'hasTime' is not null or undefined
        if (hasTime === null || hasTime === undefined) {
            throw new Error('Required parameter hasTime was null or undefined when calling consent.');
        }
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling consent.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling consent.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (hasTime !== undefined) {
            formParams.set('hasTime', <any>hasTime);
        }

        if (meetingId !== undefined) {
            formParams.set('meetingId', <any>meetingId);
        }

        if (userId !== undefined) {
            formParams.set('userId', <any>userId);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
